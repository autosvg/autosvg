@startuml

Automaton "1" *-- "*" State
Automaton "1" *-- "*" Transition
Automaton "1" *-- "*" Sym
Automaton "1" o-- "*" AutomatonListener
AutomatonListener <|.. Layout
AutomatonListener <|.. Style

class globals {
    + state() : State
    + transition() : Transition
    + symbol() : Sym
}
hide globals circle
hide globals fields

class Automaton {
  - finals : Array<Integer>
  - initials : Array<Integer>
  __
  + add(s : State) = this
  + delete(s : State)= this
  + states() : Array<State>
  ..
  + add(t : Transition) = this
  + delete(t : Transition)= this
  + transitions() : Array<Transition>
  ..
  + add(a : Sym) = this
  + delete(a : Sym) = this
  + alphabet() : Array<Sym>
  ..
  + listen(al : AutomatonListener) = this
  + dontListen(al : AutomatonListner) = this

}

class State {
  - final : bool = false
  - initial : bool = false
  __
  + isFinal() : bool
  + final() = this
  + notFinal() = this
  ..
  + isInitial() : bool
  + initial() = this
  + notInitial() = this
}

class Transition{ 
 - from : State
 - to : State 
 - symbol : Sym
 __
 + from() : State
 + from(start : State) = this
 ..
 + to() : State 
 + to(end : State) = this
 ..
 + symbol() : Sym
 + symbol(symbol : Sym) = this
}

interface AutomatonListener {
  __
  + init() = this
  ..
  + add(s : State) = this
  + delete(s : State)= this
  ..
  + add(t : Transition) = this
  + delete(t : Transition)= this
  ..
  + add(a : Sym) = this
  + delete(a : Sym) = this
}

class Layout {
  + update() = this
  + place(s : State, x : int, y: int) = this
}

class Style {
  + label(s : State, l : string) = this
  + label(a : Sym, l : string) = this
  + label(s : State) : string
  + label(a : Sym) : string
}

class Sym{
}
