{
    const init = require("./init.js");
    const setAttrs = init.setAttrs;
    const setLocations = init.setLocations;
    const locationToken = init.locationToken;
    const exception = init.exception;

    let desc = {
      defaults: {},
      data: {}
    }

    let loc = {
      defaults: {},
      data: {}
    };

}

start =
  t:type ws attrs:(attrs?) a:automaton_block
  { 
    setAttrs(desc, attrs);
    setLocations(loc, attrs);
    if(desc.data.transitions == null) {
        throw exception.create(exception.MBToken, "transitions");
    }
    return {desc, loc};
  }


type =
    t:$"finite automaton" {
        desc.type = t;
        loc.type = location();
    }

automaton_block =
  block_start blocks:blocks block_end 

blocks =
  block*

block =
  states_block
  / symbols_block
  / transitions_block

states_block =
  t:"states" ws attrs:(attrs?) block_start s:states block_end
  { 
    if(desc.data.states == null) {
      desc.data.states = s.data ;
      loc.data.states = s.location;
      desc.defaults.states = {};
      loc.defaults.states = {};
      setAttrs(desc.defaults.states, attrs);
      setLocations(loc.defaults.states, attrs);
      loc.defaults.states[locationToken] = location();
    } else {
        throw new exception.create(exception.ALDToken, "states", loc.defaults.states[locationToken], location());
    }
  }

symbols_block =
  t:"symbols" ws attrs:(attrs?) block_start s:symbols block_end
  {
    if(desc.data.symbols == null) {
      desc.data.symbols = s.data;
      loc.data.symbols = s.location;
      desc.defaults.symbols = {};
      loc.defaults.symbols = {};
      setAttrs(desc.defaults.symbols, attrs);
      setLocations(loc.defaults.symbols, attrs);
      loc.defaults.symbols[locationToken] = location();
    } else {
        throw new exception.create(exception.ALDToken, "symbols", loc.defaults.symbols[locationToken], location());
    }
  }

transitions_block =
  "transitions" ws attrs:(attrs?) block_start t:transitions block_end
  {
    if(desc.data.transitions == null) {
      desc.data.transitions = t.data;
      loc.data.transitions = t.location;
      desc.defaults.transitions = {};
      loc.defaults.transitions = {};
      setAttrs(desc.defaults.transitions, attrs);
      setLocations(loc.defaults.transitions, attrs);
      loc.defaults.transitions[locationToken] = location();
    } else {
        throw new exception.create(exception.ALDToken, "transitions", loc.defaults.transitions[locationToken], location());
    }
  }

states =
  states:(state*) {
      return {
        data: states.map((s) => s.data),
        location: states.map((s) => s.location)
      }
  }

symbols =
  symbols:(symbol*) {
    return {
        data: symbols.map((s) => s.data),
        location: symbols.map((s) => s.location)
    }
  }

transitions =
  transitions:(transition*)
  {
    let data = new Array();
    let location = new Array();
    for(var i = 0; i < transitions.length; i++) {
        for(var j = 0; j < transitions[i].data.to.length; j++) {
            data.push(setAttrs({
                from: transitions[i].data.from,
                by: transitions[i].data.by,
                to: transitions[i].data.to[j].data
            }, transitions[i].data.attrs));
            location.push(setLocations({
                from: transitions[i].location.from,
                by: transitions[i].location.by,
                to: transitions[i].data.to[j].location
            }, transitions[i].data.attrs));
        }
    }
    return {data, location}
  }

state =
  id:identifier ws attrs:(attrs?)
  {
    return {
        data: setAttrs({id: id.data}, attrs),
        location: setLocations({
            id: location(),
        }, attrs)
    };
  }

symbol =
  id:identifier ws attrs:(attrs?)
  {
    return {
        data: setAttrs({id: id.data}, attrs),
        location: setLocations({
            id: location(),
        }, attrs),
    }
  }

transition =
  from:identifier ws by:identifier ws "->"  ws to:list_identifier ws  attrs:(attrs?) ws
  {
    return {
        data: {from: from.data, by: by.data, to: to.data, attrs},
        location: {from: from.location, by:  by.location, to:  to.location, attrs}
    };
  }


list_identifier =
    i:identifier "," l:list_identifier {
        return {
            data: new Array(i).concat(l.data),
            location : new Array(location()).concat(l.location)
        }
    }
    / i:identifier { 
        return {
            data: new Array(i),
            location: location()
        };
    }


attrs =
    "[" attrs:(attr*) "]" ws { return {
      data: attrs.map((a) => a.data),
      location: attrs.map((a) => a.location)
    }; }

attr =
    name:identifier ws "=" ws value:boolean ws { 
      let obj = {}, loc = {};
      obj[name.data] = (value === "true");
      loc[name.data] = name.location;
      return {
        data: obj,
        location: loc
      };
    }
    / name:identifier ws "=" ws color:color ws { 
        let obj = {}, loc = {}; 
        obj[name.data] = color; 
        loc[name.data] = name.location;
        return {
            data: obj,
            location: loc
        };
    }
    / name:identifier ws "=" ws value:quoted_string ws  { 
        let obj = {}, loc = {}; 
        obj[name.data] = value;
        loc[name.data] = name.location;
        return {
            data: obj,
            location: loc
        };
    } 
    / name:identifier ws "=" ws value:number ws { 
        let obj = {}, loc = {}; 
        obj[name.data] = parseFloat(value); 
        loc[name.data] = name.location;
        return {
            data: obj,
            location: loc
        };
    }
    / name:identifier ws { 
        let obj = {}, loc = {}; 
        obj[name.data] = true; 
        loc[name.data] = name.location;
        return {
            data: obj,
            location: loc
        };
    }
     

identifier =
    id:$([a-zA-Z_0-9]+) {
        return {
            data: id,
            location: location()
        }
    }

string =
    [^\"]*

quoted_string =
   "\"" str:$string "\"" { return str; }

color =
    color:$("#" $(hexdigit hexdigit hexdigit hexdigit hexdigit hexdigit / hexdigit hexdigit hexdigit)) { return color }

number =
    $((digit*)("."(digit+))?)

digit =
    ([0-9])
    
hexdigit =
    ([a-fA-F0-9])

boolean = 
    "true"
    / "false"

block_start =
   ws "{" ws 

block_end =
    ws "}" ws 

ws = 
    [ \t\n\r]* 
